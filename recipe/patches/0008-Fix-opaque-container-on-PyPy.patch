From 3cb9b6383a2bdc626f005b5b13789d4c75fabfb5 Mon Sep 17 00:00:00 2001
From: WyattBlue <wyattblue@auto-editor.com>
Date: Mon, 21 Jul 2025 22:45:35 -0400
Subject: [PATCH 08/13] Fix opaque container on PyPy

---
 av/opaque.pyx | 14 +++++++-------
 1 file changed, 7 insertions(+), 7 deletions(-)

diff --git a/av/opaque.pyx b/av/opaque.pyx
index 619169e..0c2a450 100644
--- a/av/opaque.pyx
+++ b/av/opaque.pyx
@@ -1,5 +1,5 @@
 cimport libav as lib
-from libc.stdint cimport uint8_t
+from libc.stdint cimport intptr_t, uint8_t
 from libc.string cimport memcpy
 
 
@@ -15,18 +15,18 @@ cdef class OpaqueContainer:
 
     cdef lib.AVBufferRef *add(self, object v):
         # Use object's memory address as key
-        cdef size_t key = id(v)
+        cdef intptr_t key = id(v)
         self._objects[key] = v
 
-        cdef uint8_t *data = <uint8_t *>lib.av_malloc(sizeof(size_t))
+        cdef uint8_t *data = <uint8_t *>lib.av_malloc(sizeof(intptr_t))
         if data == NULL:
             raise MemoryError("Failed to allocate memory for key")
 
-        memcpy(data, &key, sizeof(size_t))
+        memcpy(data, &key, sizeof(intptr_t))
 
         # Create the buffer with our free callback
         cdef lib.AVBufferRef *buffer_ref = lib.av_buffer_create(
-            data, sizeof(size_t), key_free, NULL, 0
+            data, sizeof(intptr_t), key_free, NULL, 0
         )
 
         if buffer_ref == NULL:
@@ -35,11 +35,11 @@ cdef class OpaqueContainer:
         return buffer_ref
 
     cdef object get(self, char *name):
-        cdef size_t key = (<size_t *>name)[0]
+        cdef intptr_t key = (<intptr_t *>name)[0]
         return self._objects.get(key)
 
     cdef object pop(self, char *name):
-        cdef size_t key = (<size_t *>name)[0]
+        cdef intptr_t key = (<intptr_t *>name)[0]
         return self._objects.pop(key, None)
 
 
-- 
2.49.0

